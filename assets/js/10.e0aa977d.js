(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{343:function(e,t,r){"use strict";r.r(t);var a=r(33),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"vue-router使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-router使用"}},[e._v("#")]),e._v(" vue-router使用")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { HashRouter as Router, Route, Link, Redirect, Switch, withRouter, Prompt } from 'react-router-dom' \n")])])]),r("p",[r("code",[e._v("Router")]),e._v("在最外层，将组建包裹起来，"),r("code",[e._v("Route")]),e._v("表示一个个页面，里面有path属性设置跳转路由，component属性设置组件，exact设置是否精准匹配\n"),r("code",[e._v("Link")]),e._v("表示链接，通过to属性写入跳转路径，"),r("code",[e._v("Redirect")]),e._v("表示重定向\n"),r("code",[e._v("Switch")]),e._v("包裹"),r("code",[e._v("Route")]),e._v("表示选择其中一项，"),r("code",[e._v("withRouter")]),e._v("高阶函数，将普通组件包裹起来，内部传入router相关属性\n"),r("code",[e._v("Prompt")]),e._v("包裹组件，通过设置when属性，可以阻止跳转\n"),r("code",[e._v("Route")]),e._v("中还有render和children两个参数接受一个函数，其中render是路由匹配成功才会执行，children是一定会执行，render优先级高于children")]),e._v(" "),r("h1",{attrs:{id:"redux使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux使用"}},[e._v("#")]),e._v(" redux使用")]),e._v(" "),r("p",[e._v("在react中使用redux还需要react-redux")]),e._v(" "),r("h2",{attrs:{id:"react-redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[e._v("#")]),e._v(" "),r("code",[e._v("react-redux")])]),e._v(" "),r("ul",[r("li",[e._v("在最外层提供一个"),r("code",[e._v("Provider")]),e._v("，通过store属性将store放到context上下文中\n"),r("ul",[r("li",[e._v("在需要用store的组件内提供一个"),r("code",[e._v("connect")]),e._v("高阶函数，通过类似"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("\tconst mapStateToProps = state => state\n\tconnect(\n\t\tmapStateToProps,\n\t\tactions\n\t)(ComponentName)\n")])])]),e._v("将store中的state和dispatch传给组件的props，且为组件绑定store.subscribe使其每次都可以重新渲染内容")])])])]),e._v(" "),r("h2",{attrs:{id:"redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[e._v("#")]),e._v(" redux")]),e._v(" "),r("p",[e._v("redux生成一个store，外部操作通过dispatch发布一个action，在store中有reducer负责接收上次的state状态和action，根据action中的type属性，对state进行修改，同时当state发生改变时，之前store.subscribe过的组件会受到通知，触发回调方法。")]),e._v(" "),r("ul",[r("li",[e._v("reducer 接收state，action根据action对state进行操作，返回新的state 如果有多个reducer 需要使用redux的"),r("code",[e._v("combineReducers")]),e._v("将多个reducer进行合并")]),e._v(" "),r("li",[e._v("action 约定好的行为 普通action返回一个包含type属性的对象，也有异步action和promise action等")]),e._v(" "),r("li",[e._v("store\n"),r("ul",[r("li",[e._v("不使用中间件的话可以直接使用redux中的createStore"),r("code",[e._v("let store = createStore(reducer, initialState)")]),e._v(" 生成store")]),e._v(" "),r("li",[e._v("使用中间件的话就需要使用redux中的applyMiddleware"),r("code",[e._v("let store = applyMiddleware(thunk, promise, logger)(createStore)(reducers, initialState)")])])])]),e._v(" "),r("li",[e._v("中间件\n中间件结构都是")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function({dispatch, getState}){\n\treturn next => action =>{\n\t\t//一些操作\n\t\tnext(action)\n\t}\n}\n")])])]),r("h1",{attrs:{id:"router、redux一起使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#router、redux一起使用"}},[e._v("#")]),e._v(" router、redux一起使用")]),e._v(" "),r("p",[e._v("使用"),r("code",[e._v("connected-react-router")]),e._v("将redux和router相连接\n首先使用"),r("code",[e._v("history")]),e._v("库中的"),r("code",[e._v("createBrowserHistory")]),e._v("方法创建一个history")]),e._v(" "),r("h2",{attrs:{id:"在组件上"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在组件上"}},[e._v("#")]),e._v(" 在组件上")]),e._v(" "),r("p",[e._v("在"),r("code",[e._v("react-redux")]),e._v("的"),r("code",[e._v("Provider")]),e._v("组件内使用"),r("code",[e._v("connected-react-router")]),e._v("的"),r("code",[e._v("ConnectedRouter")]),e._v("并将其history属性赋值history，此时无需再使用react-router-dom中的Router组件包裹Route")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<ConnectedRouter history={history}>\n\t<Route path='/' exact component={Home} />\n\t<Route path='/counter' exact component={Counter} />\n</ConnectedRouter>\n")])])]),r("h2",{attrs:{id:"在redux中"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在redux中"}},[e._v("#")]),e._v(" 在redux中")]),e._v(" "),r("p",[e._v("在action如果需要使用router中history的push方法直接从"),r("code",[e._v("connected-react-router")]),e._v("引入push使用即可\n在reducer中需要使用"),r("code",[e._v("combineReducers")]),e._v("将"),r("code",[e._v("connected-react-router")]),e._v("中的reducer"),r("code",[e._v("connectRouter")]),e._v("放到总的reducer中")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("let reducers = combineReducers({\n\trouter: connectRouter(history),\n\t...otherReducers\n})\n")])])]),r("p",[e._v("在生成store的时候需要使用"),r("code",[e._v("applyMiddleware")]),e._v("将"),r("code",[e._v("connected-react-router")]),e._v("中的中间件"),r("code",[e._v("routerMiddleware")]),e._v("放到总的中间件中"),r("code",[e._v("applyMiddleware(routerMiddleware(history))")])])])}),[],!1,null,null,null);t.default=o.exports}}]);