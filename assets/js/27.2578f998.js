(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{362:function(e,v,t){"use strict";t.r(v);var _=t(33),a=Object(_.a)({},(function(){var e=this,v=e.$createElement,t=e._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"微信小程序登陆流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序登陆流程"}},[e._v("#")]),e._v(" 微信小程序登陆流程")]),e._v(" "),t("p",[e._v("首先通过"),t("code",[e._v("wx.login")]),e._v("获取"),t("code",[e._v("code")]),e._v("，之后将"),t("code",[e._v("code")]),e._v("通过"),t("code",[e._v("wx.request")]),e._v("发送到第三方服务器，第三方服务器将"),t("code",[e._v("appid、appsecret、code")]),e._v("发送给微信官方api请求到"),t("code",[e._v("session_key, openid")]),e._v("，之后服务器可以通过"),t("code",[e._v("token")]),e._v("之类自定义登录态的将其与"),t("code",[e._v("session_key, openid")]),e._v("关联，且将"),t("code",[e._v("session_key, openid")]),e._v("保存到服务端，然后把自定义登录态返回给小程序，小程序将其保存起来，之后进行业务请求的时候携带用于查询"),t("code",[e._v("session_key, openid")]),e._v("是否符合条件。")]),e._v(" "),t("h2",{attrs:{id:"微信小程序授权的流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序授权的流程"}},[e._v("#")]),e._v(" 微信小程序授权的流程")]),e._v(" "),t("p",[e._v("获取用户信息的api "),t("code",[e._v("wx.getUserInfo")]),e._v("，需要在用户已授权的情况下才会进入success回调，否则会进入fail回调，用户授权需要增加一个"),t("code",[e._v("<button open-type='getUserInfo' bindgetuserinfo='yourMethod'>授权用户信息</button>")]),e._v("按钮，用户点击确认授权后就会获得信息，与"),t("code",[e._v("wx.getUserInfo")]),e._v("回调返回的数据一致")]),e._v(" "),t("h2",{attrs:{id:"微信小程序渲染机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序渲染机制"}},[e._v("#")]),e._v(" 微信小程序渲染机制")]),e._v(" "),t("p",[e._v("小程序视图层目前使用WebView作为渲染载体，逻辑层是由JavaScriptCore作为运行环境。两个都是独立的模块，并不具备数据之间共享的通道，它们之间的通信是通过两边的evaluateJavaScript所实现。用户传输的数据，会先被转化为字符串形式传递，同时把传递后的数据内容转化为JS脚本，最后运行JS脚本的形式传递到两边独立环境。")]),e._v(" "),t("h2",{attrs:{id:"微信小程序生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序生命周期"}},[e._v("#")]),e._v(" 微信小程序生命周期")]),e._v(" "),t("ul",[t("li",[e._v("App内\n"),t("code",[e._v("onLaunch")]),e._v(","),t("code",[e._v("onShow")]),e._v(","),t("code",[e._v("onHide")]),e._v(","),t("code",[e._v("onError")])]),e._v(" "),t("li",[e._v("Page内\n"),t("code",[e._v("onLoad")]),e._v(","),t("code",[e._v("onShow")]),e._v(","),t("code",[e._v("onReady")]),e._v(","),t("code",[e._v("onHide")]),e._v(","),t("code",[e._v("onUnload")])])]),e._v(" "),t("p",[t("strong",[e._v("如果同时有app和page的生命周期，会先触发app的，然后触发page内的")]),e._v("\n后退之后不会触发onLoad，只会触发onShow")]),e._v(" "),t("h2",{attrs:{id:"cookie-localstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie-localstorage"}},[e._v("#")]),e._v(" cookie localStorage")]),e._v(" "),t("ul",[t("li",[e._v("cookie\n"),t("code",[e._v("domain")]),e._v("：cookie可以通过设置domain让两个二级域名相同的跨域请求中，cookie可以互相使用，eg: t1.test.com 和 t2.test.com，在第一个页面中生成cookie 如果不设置默认domain是当前域名 t1.test.com，此时 t2.test.com 无法使用此cookie，如果设置 domain=.test.com 此时两个页面都可以使用此cookie "),t("br"),e._v(" "),t("code",[e._v("path")]),e._v("：默认是根目录 / ，即当前域名下页面都可视cookie，如果设置了path，则只有匹配的path才可视")]),e._v(" "),t("li",[e._v("localStorage\nlocalStorage不支持跨域")])]),e._v(" "),t("h2",{attrs:{id:"常见的请求header字段，状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的请求header字段，状态码"}},[e._v("#")]),e._v(" 常见的请求header字段，状态码")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Cache-Control 控制缓存行为")])]),e._v(" "),t("li",[t("p",[e._v("Connection 浏览器想优先使用的连接类型")])]),e._v(" "),t("li",[t("p",[e._v("Date 创建报文时间")])]),e._v(" "),t("li",[t("p",[e._v("Transfer-Encoding 传输编码方式")])]),e._v(" "),t("li",[t("p",[e._v("Accept 能正确接收的媒体类型（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("Accept-Encoding 能正确接收的编码格式列表（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("Accept-Language 能正确接收的语言列表（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("Host 服务器域名（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("If-Modified-Since 判断Last-modified是否改变（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("If-None-Match 判断ETag是否改变（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("User-Agent 客户端信息（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("Referer 表示浏览器所访问的前一个页面（请求头）")])]),e._v(" "),t("li",[t("p",[e._v("Server 服务器名字（响应头）")])]),e._v(" "),t("li",[t("p",[e._v("ETag 资源标识（响应头）")])]),e._v(" "),t("li",[t("p",[e._v("200 表示客户端发来的请求在服务端被正确处理")])]),e._v(" "),t("li",[t("p",[e._v("204 No Content 表示响应报文不含实体的主体部分")])]),e._v(" "),t("li",[t("p",[e._v("301 永久性重定向")])]),e._v(" "),t("li",[t("p",[e._v("302 临时性重定向")])]),e._v(" "),t("li",[t("p",[e._v("304 表示服务器允许访问资源，但因发生请求未满足条件的情况")])]),e._v(" "),t("li",[t("p",[e._v("400 请求报文存在语法错误")])]),e._v(" "),t("li",[t("p",[e._v("401 表示发送的请求需要有通过HTTP认证的认证消息")])]),e._v(" "),t("li",[t("p",[e._v("403 表示请求资源被拒绝")])]),e._v(" "),t("li",[t("p",[e._v("404 表示服务器上没有请求的资源")])]),e._v(" "),t("li",[t("p",[e._v("500 服务端在执行请求时发生错误")])]),e._v(" "),t("li",[t("p",[e._v("501 服务器不支持当前请求所需要的某个功能")])]),e._v(" "),t("li",[t("p",[e._v("503 表明服务器暂时处于超负荷或正在停机维护，无法处理请求")])]),e._v(" "),t("li",[t("p",[e._v("504 表明服务器作为网关或代理，但是没有及时从上游服务器收到请求")])])]),e._v(" "),t("h2",{attrs:{id:"js版本发送变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js版本发送变化"}},[e._v("#")]),e._v(" JS版本发送变化")]),e._v(" "),t("ul",[t("li",[e._v("通过webpack打包时给JS设置Hash值，当Hash值不同时，表明JS发生变化，需要重新请求新的JS而不是用缓存的JS")]),e._v(" "),t("li",[e._v("通过引入JS后加一个"),t("code",[e._v("xxx.js?v=20200524")]),e._v("一个版本号，原理与hash类似")])]),e._v(" "),t("h2",{attrs:{id:"http和https区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http和https区别"}},[e._v("#")]),e._v(" HTTP和HTTPS区别")]),e._v(" "),t("ol",[t("li",[e._v("HTTPS需要申请证书")]),e._v(" "),t("li",[e._v("HTTP是明文传输，HTTPS使用了TLS进行加密传输")]),e._v(" "),t("li",[e._v("HTTP端口是80 HTTPS端口是443 二者使用的连接方式不同")]),e._v(" "),t("li",[e._v("HTTP连接是简单，无状态的；HTTPS是由TLS+HTTP构建的可进行加密传输、身份认证的网络协议。")])]),e._v(" "),t("h2",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[e._v("#")]),e._v(" 闭包")]),e._v(" "),t("ul",[t("li",[e._v("什么是闭包\n函数A中有一个函数B，函数B可以调用函数A的变量，函数B就是闭包")]),e._v(" "),t("li",[e._v("闭包的用途\n封装私有变量，防抖节流，回调方法")]),e._v(" "),t("li",[e._v("闭包是否会造成内存泄漏\n闭包并不会造成内存泄漏，造成内存泄漏的原因是因为IE的垃圾回收机制，在JS高程中是这样描述的：\n"),t("blockquote",[t("p",[e._v("由于IE9 之前的版本对JavaScript 对象和DOM 对象使用不同的垃圾收集。因此闭包在IE 的这些版本中会导致一些特殊的问题。具体来说，如果闭包的作用域链中保存着一个HTML 元素，那么就意味着该元素将无法被销毁。")])])])]),e._v(" "),t("h2",{attrs:{id:"原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[e._v("#")]),e._v(" 原型链")]),e._v(" "),t("ul",[t("li",[e._v("什么是原型链\n原型链就是多个对象通过 "),t("code",[e._v("__proto__")]),e._v(" 的方式连接了起来")]),e._v(" "),t("li",[e._v("继承的原型链"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Parent(value){\n\tthis.value = value\n}\nParent.prototype.getValue = function(){\n\treturn this.value\n}\nfunction Child(value){\n\tParent.call(this, value)\n}\nChild.prototype = new Parent()\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"网络请求方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络请求方式"}},[e._v("#")]),e._v(" 网络请求方式")]),e._v(" "),t("ul",[t("li",[e._v("get\n用来获取数据，一般用来查询")]),e._v(" "),t("li",[e._v("post\n用来改变服务器的数据，常用来数据提交，新增等")]),e._v(" "),t("li",[e._v("put\n与post类似，但是put侧重于数据的修改，post侧重于数据的新增")]),e._v(" "),t("li",[e._v("delete\n删除服务器的资源")]),e._v(" "),t("li",[e._v("options\n浏览器预检请求")])]),e._v(" "),t("p",[e._v("GET请求由于参数在链接上面，因此url长度会根据浏览器以及服务器的不同有不同的限制，最大长度并不是固定的，如果请求参数过长，会返回414错误"),t("br")]),e._v(" "),t("ul",[t("li",[e._v("IE：对URL的最大限制为2083个字符，若超出这个数字，提交按钮没有任何反应。")]),e._v(" "),t("li",[e._v("Firefox：对Firefox浏览器URL的长度限制为：65536个字符。")]),e._v(" "),t("li",[e._v("Safari：URL最大长度限制为80000个字符。")]),e._v(" "),t("li",[e._v("Opera：URL最大长度限制为190000个字符。")]),e._v(" "),t("li",[e._v("Google(chrome)：URL最大长度限制为8182个字符。")]),e._v(" "),t("li",[e._v("Apache(Server)：能接受的最大url长度为8192个字符")]),e._v(" "),t("li",[e._v("Microsoft Internet Information Server(IIS)：n能接受最大url的长度为16384个字符。")])]),e._v(" "),t("h2",{attrs:{id:"模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[e._v("#")]),e._v(" 模块化")]),e._v(" "),t("ol",[t("li",[e._v("解决命名冲突")]),e._v(" "),t("li",[e._v("提供复用性")]),e._v(" "),t("li",[e._v("提高代码的可维护性")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("CommonJS")]),e._v(" "),t("ul",[t("li",[e._v("通过"),t("code",[e._v("module.exports = xxx")]),e._v("或者"),t("code",[e._v("exports.xxx = xxx")]),e._v("将文件导出")]),e._v(" "),t("li",[e._v("通过"),t("code",[e._v("require()")]),e._v("引入"),t("br")])]),e._v(" "),t("p",[e._v("module是node中的一个变量，基本实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" let module = {\n   id: 'xxx',\n   exports:{}\n }\n\n let exports = module.exports\n")])])])]),e._v(" "),t("li",[t("p",[e._v("ES Module")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//引入\nimport xxx from 'xxx'\nimport {xxx} from 'xxx'\n//导出\nexport function a(){}\nexport default function(){}\n")])])]),t("p",[e._v("ES Module 和 CommonJS区别")]),e._v(" "),t("ul",[t("li",[e._v("CommonJS支持动态导入而ES Module通常是静态导入，但是也可以使用import()动态导入")]),e._v(" "),t("li",[e._v("CommonJS是同步导入，ES Module是异步导入，因此可以用于浏览器，下载文件等")]),e._v(" "),t("li",[e._v("CommonJS导出的只是拷贝值，即使导出的值发生变化，导入的值也不会改变，ES Module采用的是实时绑定的方式，导入导出指向同一个内存地址，因此会发生变化")]),e._v(" "),t("li",[e._v("ES Module会被编译成require/exports来执行")])])])]),e._v(" "),t("h2",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),t("p",[e._v("webpack会通过entry读取入口文件，然后根据入口文件获取入口文件所需要的依赖文件，最后导出output设置好的bundle文件，bundle文件是一个自执行函数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(";(function(modules){\n  function require(moduleId){\n    const module = {exports:{}}\n    modules[moduleId](module, module.exports, require)\n    return module.exports\n  }\n  require('./entry.js')\n})({\n  './entry.js': function(module, exports, require){\n    var _a = require('./a.js')\n    console.log(_a.default)\n  },\n  './a.js': function(module, exports, require){\n    var a = 1\n    exports.default = a\n  }\n})\n")])])]),t("p",[e._v("结构就是这样通过执行函数，参数是一个对象，对象由"),t("code",[e._v("moduleId: function(module, exports, require){}")]),e._v("一个个这样的结构组成，可以根据依赖一个个进行引用"),t("br"),e._v("\n具体过程是通过读取入口文件，将入口文件转化为ast进行解析，遍历ast将所有依赖放入一个数组中，最后在打包的时候循环遍历依赖数组生成参数对象，并将其和函数拼接在一起，生成设置好的output文件。")]),e._v(" "),t("h2",{attrs:{id:"vdom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vdom"}},[e._v("#")]),e._v(" vdom")]),e._v(" "),t("p",[e._v("通过原生的JS对象去描述一个DOM节点，它比创建一个DOM的代价要小很多。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vnode{\n  tag,\n  data,\n  key,\n  children,\n  text,\n}\n")])])]),t("p",[e._v("vdom好处")]),e._v(" "),t("ol",[t("li",[e._v("解决浏览器性能问题，可以先通过js模拟dom通过diff算法优化更新，最后再交由浏览器去绘制")]),e._v(" "),t("li",[e._v("把渲染过程抽象化了，从而使得组件的抽象能力也得到提升")]),e._v(" "),t("li",[e._v("因为node端是没有dom元素的，所以vdom可以更好的实现SSR，同构渲染")]),e._v(" "),t("li",[e._v("可以实现框架的跨平台")])]),e._v(" "),t("h2",{attrs:{id:"websocket优势劣势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket优势劣势"}},[e._v("#")]),e._v(" websocket优势劣势")]),e._v(" "),t("p",[e._v("普通HTTP")]),e._v(" "),t("ul",[t("li",[e._v("HTTP是半双工协议 同一时刻只能单向流动")]),e._v(" "),t("li",[e._v("HTTP中服务器不能主动推送数据给客户端\n双向通信")]),e._v(" "),t("li",[e._v("轮询\n"),t("ul",[t("li",[e._v("客户端和服务器之间一直进行连接，每隔一段时间发送一次")])])]),e._v(" "),t("li",[e._v("长轮询\n"),t("ul",[t("li",[e._v("对轮询进行改进，客户端发送HTTP给服务器，如果没有新消息就一直等待，当有消息时，才会返回客户端，然后客户端重新发送HTTP给服务器继续等待")])])]),e._v(" "),t("li",[e._v("ifream流\n"),t("ul",[t("li",[e._v("通过在页面上嵌入一个隐藏的ifream，设置ifream的src属性为请求，就可以源源不断的往客户端推送数据")])])]),e._v(" "),t("li",[e._v("EventSource流(Server Sent Event)\n"),t("ul",[t("li",[e._v("客户端向服务端订阅一条流，之后服务端可以发送消息给客户端直到客户端或者服务端关闭该流")]),e._v(" "),t("li",[e._v("单向的只能从服务端向客户端发送流，且格式固定"),t("code",[e._v("Content-Type: text/event-stream")]),e._v("，内容格式也是确定好的")])])]),e._v(" "),t("li",[e._v("WebSocket\n"),t("ul",[t("li",[e._v("在客户端和服务端保持一个持久的连接，两边都可以在任何时间开始发送数据")]),e._v(" "),t("li",[e._v("属于应用层协议，基于TCP传输协议，复用HTTP的握手通道")]),e._v(" "),t("li",[e._v("全双工通信，实时性强")]),e._v(" "),t("li",[e._v("更好的二进制支持")]),e._v(" "),t("li",[e._v("较少的控制开销。连接创建后，信息交互时协议控制的数据包头部较小")])])])]),e._v(" "),t("h2",{attrs:{id:"mock数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mock数据"}},[e._v("#")]),e._v(" mock数据")]),e._v(" "),t("ul",[t("li",[e._v("使用mockJS")]),e._v(" "),t("li",[e._v("在webpack的devServer配置before钩子，拦截请求返回mock数据")])]),e._v(" "),t("h2",{attrs:{id:"移动端适配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#移动端适配"}},[e._v("#")]),e._v(" 移动端适配")]),e._v(" "),t("ol",[t("li",[e._v("解决移动端1px方案\n根据dpr在媒体查询中使用"),t("code",[e._v("transform: scale()")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* 2倍屏 */\n@media only screen and (-webkit-min-device-pixel-ratio: 2.0) {\n    .border-bottom::after {\n        -webkit-transform: scaleY(0.5);\n        transform: scaleY(0.5);\n    }\n}\n\n/* 3倍屏 */\n@media only screen and (-webkit-min-device-pixel-ratio: 3.0) {\n    .border-bottom::after {\n        -webkit-transform: scaleY(0.33);\n        transform: scaleY(0.33);\n    }\n}\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("viewport\n移动端配置视口，加一个meta标签")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<meta name="viewport" content="width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;">\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("rem适配\n通过设置根元素的font-size使得rem在不同设备上自适应大小")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(function (){\n  //根据屏幕大小设置根元素\n  function refreshRem() {\n    var dom = document.documentElement\n    dom.style.fontSize = dom.clientWidth / 750 * 100 + 'px'\n  }\n  refreshRem()\n  window.addEventListener('resize', refreshRem, false)\n})()\n")])])]),t("p",[e._v("本质上，"),t("strong",[e._v("用户使用更大的屏幕，是想看到更多的内容，而不是更大的字")]),e._v("，所以通过缩放来解决问题的方案是个过度方案。\n4. vw vh布局\nwindow.innerWidth和window.innerHeight等分为100份，每份就是1vw 1vh，vmin是宽高中最小的数值，vmax是宽高中最大的数值，在webpack中可以使用"),t("code",[e._v("postcss-px-to-viewport")]),e._v("进行转化\n5. px为主 rem vw vh为辅 使用flex布局\n6. 移动端适配流程")]),e._v(" "),t("ul",[t("li",[e._v("在head中设置viewport width=device-width的meta")]),e._v(" "),t("li",[e._v("在css中使用px")]),e._v(" "),t("li",[e._v("在适当场景使用flex布局，配合vw进行自适应")]),e._v(" "),t("li",[e._v("在跨设备类型使用媒体查询")]),e._v(" "),t("li",[e._v("如果跨设备类型交互差异过大，考虑分开项目开发")])])])}),[],!1,null,null,null);v.default=a.exports}}]);