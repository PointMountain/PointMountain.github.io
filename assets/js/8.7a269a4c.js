(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{341:function(e,t,o){"use strict";o.r(t);var r=o(33),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"react基础"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#react基础"}},[e._v("#")]),e._v(" React基础")]),e._v(" "),o("h2",{attrs:{id:"生命周期（类组件）"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#生命周期（类组件）"}},[e._v("#")]),e._v(" 生命周期（类组件）")]),e._v(" "),o("ol",[o("li",[o("code",[e._v("constructor(props)")]),e._v("最先调用 初始化实例")]),e._v(" "),o("li",[o("code",[e._v("static getDerivedStateFromProps(props, state)")]),e._v("每次初始化或者更新state的时候可以调用，返回一个对象赋值给新的state，返回null则不更新，很少使用")]),e._v(" "),o("li",[o("code",[e._v("shouldComponentUpdate(nextProps, nextState)")]),e._v("可以根据参数选择是否进行数据更新，一般作为性能优化的考虑，返回值为true/false，但是一般类组件可以通过"),o("code",[e._v("PureComponent")]),e._v("函数组件通过"),o("code",[e._v("React.memo")]),e._v("进行浅层比较进行优化")]),e._v(" "),o("li",[o("code",[e._v("render()")]),e._v("返回组件")]),e._v(" "),o("li",[o("code",[e._v("componentDidMount()")]),e._v("会在组件挂载之后调用，如果里面直接调用 "),o("code",[e._v("setState()")]),e._v("。它将触发额外渲染，但此渲染会发生在浏览器更新屏幕之前。如此保证了即使在"),o("code",[e._v("render()")]),e._v("两次调用的情况下，用户也不会看到中间状态。")]),e._v(" "),o("li",[o("code",[e._v("getSnapshotBeforeUpdate(prevProps, prevState)")]),e._v("在组件更新之前可以拿到快照，可以将更新前的某些DOM属性返回，作为"),o("code",[e._v("componentDidUpdate()")]),e._v("的参数")]),e._v(" "),o("li",[o("code",[e._v("componentDidUpdate(prevProps, prevState, snapshot)")]),e._v("更新后调用")]),e._v(" "),o("li",[o("code",[e._v("componentWillUnmount()")]),e._v("组件卸载前调用，用于清除事件监听，timer等")])])])}),[],!1,null,null,null);t.default=v.exports}}]);