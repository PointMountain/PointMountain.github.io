(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{344:function(t,e,r){"use strict";r.r(e);var a=r(33),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"react-router-dom使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-router-dom使用"}},[t._v("#")]),t._v(" react-router-dom使用")]),t._v(" "),r("p",[r("code",[t._v("react-router-dom")]),t._v("库是专为web人员专门设计的"),r("code",[t._v("react-router")]),t._v("库")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" HashRouter"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("BrowserRouter"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Route"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Link"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Redirect"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Switch"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" withRouter"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Prompt "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-router-dom'")]),t._v("\n")])])]),r("p",[r("code",[t._v("Router")]),t._v("必须在最外层，将组件包裹起来")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("HashRouter"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("App"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("HashRouter"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),r("p",[r("code",[t._v("Route")]),t._v("表示一个个页面，里面有path属性匹配跳转路由，component属性设置路由组件，exact设置是否精准匹配\n其中路由组件的props会传入route相关属性")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Route path"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/xxx'")]),t._v(" component"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Demo"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),r("p",[r("code",[t._v("Link")]),t._v("表示链接，通过to属性写入跳转路径，实际在浏览器是也是a标签")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Link to"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/xxxx'")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Demo"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Link"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),r("p",[r("code",[t._v("Redirect")]),t._v("表示重定向\n"),r("code",[t._v("Switch")]),t._v("包裹"),r("code",[t._v("Route")]),t._v("表示选择其中一项，"),r("code",[t._v("withRouter")]),t._v("高阶函数，将普通组件包裹起来，内部传入router相关属性\n"),r("code",[t._v("Prompt")]),t._v("包裹组件，通过设置when属性，可以阻止跳转\n"),r("code",[t._v("Route")]),t._v("中还有render和children两个参数接受一个函数，其中render是路由匹配成功才会执行，children是一定会执行，render优先级高于children")]),t._v(" "),r("h2",{attrs:{id:"路由组件和一般组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#路由组件和一般组件"}},[t._v("#")]),t._v(" 路由组件和一般组件")]),t._v(" "),r("ol",[r("li",[t._v("写法不同\n"),r("ul",[r("li",[t._v("一般组件"),r("code",[t._v("<Demo/>")])]),t._v(" "),r("li",[t._v("路由组件"),r("code",[t._v("<Route path='/xxx' component={Demo}/>")])])])]),t._v(" "),r("li",[t._v("存放位置不同\n"),r("ul",[r("li",[t._v("一般组件：放到components文件夹里")]),t._v(" "),r("li",[t._v("路由组件：放到pages文件夹里")])])]),t._v(" "),r("li",[t._v("接受的props不同\n"),r("ul",[r("li",[t._v("一般组件：写组件标签时传递了什么。就能收到什么")]),t._v(" "),r("li",[t._v("路由组件：接受三个固定的属性"),r("code",[t._v("history")]),t._v("、"),r("code",[t._v("location")]),t._v("和"),r("code",[t._v("match")]),t._v(" "),r("ol",[r("li",[r("code",[t._v("history")]),t._v(":  "),r("code",[t._v("go(), goBack(), goForward(), push(), replace()")])]),t._v(" "),r("li",[r("code",[t._v("location")]),t._v(":  "),r("code",[t._v("pathname, search, state")])]),t._v(" "),r("li",[r("code",[t._v("match")]),t._v(":  "),r("code",[t._v("params, path, url")])])])])])])]),t._v(" "),r("h1",{attrs:{id:"redux使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux使用"}},[t._v("#")]),t._v(" redux使用")]),t._v(" "),r("p",[t._v("在react中使用redux还需要react-redux")]),t._v(" "),r("h2",{attrs:{id:"react-redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" "),r("code",[t._v("react-redux")])]),t._v(" "),r("ul",[r("li",[t._v("在最外层提供一个"),r("code",[t._v("Provider")]),t._v("，通过store属性将store放到context上下文中\n"),r("ul",[r("li",[t._v("在需要用store的组件内提供一个"),r("code",[t._v("connect")]),t._v("高阶函数，通过类似"),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\tconst mapStateToProps = state => state\n\tconnect(\n\t\tmapStateToProps,\n\t\tactions\n\t)(ComponentName)\n")])])]),t._v("将store中的state和dispatch传给组件的props，且为组件绑定store.subscribe使其每次都可以重新渲染内容")])])])]),t._v(" "),r("h2",{attrs:{id:"redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" redux")]),t._v(" "),r("p",[t._v("redux生成一个store，外部操作通过dispatch发布一个action，在store中有reducer负责接收上次的state状态和action，根据action中的type属性，对state进行修改，同时当state发生改变时，之前store.subscribe过的组件会受到通知，触发回调方法。")]),t._v(" "),r("ul",[r("li",[t._v("reducer 接收state，action根据action对state进行操作，返回新的state 如果有多个reducer 需要使用redux的"),r("code",[t._v("combineReducers")]),t._v("将多个reducer进行合并")]),t._v(" "),r("li",[t._v("action 约定好的行为 普通action返回一个包含type属性的对象，也有异步action和promise action等")]),t._v(" "),r("li",[t._v("store\n"),r("ul",[r("li",[t._v("不使用中间件的话可以直接使用redux中的createStore"),r("code",[t._v("let store = createStore(reducer, initialState)")]),t._v(" 生成store")]),t._v(" "),r("li",[t._v("使用中间件的话就需要使用redux中的applyMiddleware"),r("code",[t._v("let store = applyMiddleware(thunk, promise, logger)(createStore)(reducers, initialState)")])])])]),t._v(" "),r("li",[t._v("中间件\n中间件结构都是")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function({dispatch, getState}){\n\treturn next => action =>{\n\t\t//一些操作\n\t\tnext(action)\n\t}\n}\n")])])]),r("h1",{attrs:{id:"router、redux一起使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#router、redux一起使用"}},[t._v("#")]),t._v(" router、redux一起使用")]),t._v(" "),r("p",[t._v("使用"),r("code",[t._v("connected-react-router")]),t._v("将redux和router相连接\n首先使用"),r("code",[t._v("history")]),t._v("库中的"),r("code",[t._v("createBrowserHistory")]),t._v("方法创建一个history")]),t._v(" "),r("h2",{attrs:{id:"在组件上"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在组件上"}},[t._v("#")]),t._v(" 在组件上")]),t._v(" "),r("p",[t._v("在"),r("code",[t._v("react-redux")]),t._v("的"),r("code",[t._v("Provider")]),t._v("组件内使用"),r("code",[t._v("connected-react-router")]),t._v("的"),r("code",[t._v("ConnectedRouter")]),t._v("并将其history属性赋值history，此时无需再使用react-router-dom中的Router组件包裹Route")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("<ConnectedRouter history={history}>\n\t<Route path='/' exact component={Home} />\n\t<Route path='/counter' exact component={Counter} />\n</ConnectedRouter>\n")])])]),r("h2",{attrs:{id:"在redux中"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在redux中"}},[t._v("#")]),t._v(" 在redux中")]),t._v(" "),r("p",[t._v("在action如果需要使用router中history的push方法直接从"),r("code",[t._v("connected-react-router")]),t._v("引入push使用即可\n在reducer中需要使用"),r("code",[t._v("combineReducers")]),t._v("将"),r("code",[t._v("connected-react-router")]),t._v("中的reducer"),r("code",[t._v("connectRouter")]),t._v("放到总的reducer中")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("let reducers = combineReducers({\n\trouter: connectRouter(history),\n\t...otherReducers\n})\n")])])]),r("p",[t._v("在生成store的时候需要使用"),r("code",[t._v("applyMiddleware")]),t._v("将"),r("code",[t._v("connected-react-router")]),t._v("中的中间件"),r("code",[t._v("routerMiddleware")]),t._v("放到总的中间件中"),r("code",[t._v("applyMiddleware(routerMiddleware(history))")])])])}),[],!1,null,null,null);e.default=s.exports}}]);